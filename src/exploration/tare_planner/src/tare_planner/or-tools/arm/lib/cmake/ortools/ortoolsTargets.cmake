# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.24)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS ortools::ortools_math_opt_constraints ortools::ortools_math_opt ortools::ortools ortools::flatzinc ortools::fzn)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target ortools::ortools_math_opt_constraints
add_library(ortools::ortools_math_opt_constraints INTERFACE IMPORTED)

set_target_properties(ortools::ortools_math_opt_constraints PROPERTIES
  INTERFACE_SOURCES "\$<TARGET_OBJECTS:ortools_math_opt_constraints_indicator>;\$<TARGET_OBJECTS:ortools_math_opt_constraints_quadratic>;\$<TARGET_OBJECTS:ortools_math_opt_constraints_second_order_cone>;\$<TARGET_OBJECTS:ortools_math_opt_constraints_sos>;\$<TARGET_OBJECTS:ortools_math_opt_constraints_util>"
)

# Create imported target ortools::ortools_math_opt
add_library(ortools::ortools_math_opt INTERFACE IMPORTED)

set_target_properties(ortools::ortools_math_opt PROPERTIES
  INTERFACE_LINK_LIBRARIES "ortools::ortools_math_opt_constraints"
  INTERFACE_SOURCES "\$<TARGET_OBJECTS:ortools_math_opt_core>;\$<TARGET_OBJECTS:ortools_math_opt_cpp>;\$<TARGET_OBJECTS:ortools_math_opt_io>;\$<TARGET_OBJECTS:ortools_math_opt_labs>;\$<TARGET_OBJECTS:ortools_math_opt_solvers>;\$<TARGET_OBJECTS:ortools_math_opt_storage>;\$<TARGET_OBJECTS:ortools_math_opt_validators>"
)

# Create imported target ortools::ortools
add_library(ortools::ortools SHARED IMPORTED)

set_target_properties(ortools::ortools PROPERTIES
  COMPATIBLE_INTERFACE_STRING "ortools_MAJOR_VERSION"
  INTERFACE_COMPILE_DEFINITIONS "OR_TOOLS_AS_DYNAMIC_LIB;USE_BOP;USE_GLOP;USE_LP_PARSER;USE_MATH_OPT;USE_CBC;USE_CLP;USE_PDLP;USE_SCIP"
  INTERFACE_COMPILE_FEATURES "\$<IF:\$<CXX_COMPILER_ID:MSVC>,cxx_std_20,cxx_std_17>"
  INTERFACE_COMPILE_OPTIONS "-fwrapv"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "dl;ZLIB::ZLIB;absl::base;absl::core_headers;absl::absl_check;absl::absl_log;absl::check;absl::die_if_null;absl::flags;absl::flags_commandlineflag;absl::flags_marshalling;absl::flags_parse;absl::flags_reflection;absl::flags_usage;absl::log;absl::log_flags;absl::log_globals;absl::log_initialize;absl::log_internal_message;absl::cord;absl::random_random;absl::raw_hash_set;absl::hash;absl::leak_check;absl::memory;absl::meta;absl::stacktrace;absl::status;absl::statusor;absl::str_format;absl::strings;absl::synchronization;absl::time;absl::any;protobuf::libprotobuf;re2::re2;Coin::CbcSolver;Coin::OsiCbc;Coin::ClpSolver;Coin::OsiClp;\$<\$<BOOL:OFF>:CPLEX::CPLEX>;\$<\$<BOOL:OFF>:GLPK::GLPK>;\$<\$<BOOL:OFF>:HIGHS::HIGHS>;Eigen3::Eigen;\$<\$<BOOL:ON>:libscip>;\$<\$<BOOL:OFF>:XPRESS::XPRESS>;Threads::Threads"
  INTERFACE_POSITION_INDEPENDENT_CODE "ON"
  INTERFACE_ortools_MAJOR_VERSION "9"
)

# Create imported target ortools::flatzinc
add_library(ortools::flatzinc SHARED IMPORTED)

set_target_properties(ortools::flatzinc PROPERTIES
  COMPATIBLE_INTERFACE_STRING "flatzinc_MAJOR_VERSION"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_COMPILE_OPTIONS "-fwrapv"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "ortools::ortools"
  INTERFACE_POSITION_INDEPENDENT_CODE "ON"
  INTERFACE_flatzinc_MAJOR_VERSION "9"
)

# Create imported target ortools::fzn
add_executable(ortools::fzn IMPORTED)

set_target_properties(ortools::fzn PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_COMPILE_OPTIONS "-fwrapv"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

if(CMAKE_VERSION VERSION_LESS 3.1.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.1.0 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/ortoolsTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "ZLIB::ZLIB" "absl::base" "absl::core_headers" "absl::absl_check" "absl::absl_log" "absl::check" "absl::die_if_null" "absl::flags" "absl::flags_commandlineflag" "absl::flags_marshalling" "absl::flags_parse" "absl::flags_reflection" "absl::flags_usage" "absl::log" "absl::log_flags" "absl::log_globals" "absl::log_initialize" "absl::log_internal_message" "absl::cord" "absl::random_random" "absl::raw_hash_set" "absl::hash" "absl::leak_check" "absl::memory" "absl::meta" "absl::stacktrace" "absl::status" "absl::statusor" "absl::str_format" "absl::strings" "absl::synchronization" "absl::time" "absl::any" "protobuf::libprotobuf" "re2::re2" "Coin::CbcSolver" "Coin::OsiCbc" "Coin::ClpSolver" "Coin::OsiClp" "Eigen3::Eigen" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
